/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  LiquidatooorV3,
  LiquidatooorV3Interface,
} from "../../../contracts/aave-v3/LiquidatooorV3";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPoolAddressesProvider",
        name: "_addressesProvider",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "ADDRESSES_PROVIDER",
    outputs: [
      {
        internalType: "contract IPoolAddressesProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_UINT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POOL",
    outputs: [
      {
        internalType: "contract IPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "executeOperation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_collateral",
        type: "address",
      },
      {
        internalType: "address",
        name: "_liquidatee",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_receiveAToken",
        type: "bool",
      },
    ],
    name: "requestFlashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b506040516200155e3803806200155e833981810160405281019062000037919062000283565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000de9190620002e6565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000132620001266200013960201b60201c565b6200014160201b60201c565b5062000318565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000237826200020a565b9050919050565b60006200024b826200022a565b9050919050565b6200025d816200023e565b81146200026957600080fd5b50565b6000815190506200027d8162000252565b92915050565b6000602082840312156200029c576200029b62000205565b5b6000620002ac848285016200026c565b91505092915050565b620002c0816200022a565b8114620002cc57600080fd5b50565b600081519050620002e081620002b5565b92915050565b600060208284031215620002ff57620002fe62000205565b5b60006200030f84828501620002cf565b91505092915050565b60805160a05161120b62000353600039600081816102d80152818161037b01528181610468015261051b0152600061027d015261120b6000f3fe6080604052600436106100a05760003560e01c80638947606911610064578063894760691461017f5780638da5cb5b146101a8578063e086e5ec146101d3578063e5b5019a146101ea578063f2fde38b14610215578063f8b2cb4f1461023e576100a7565b80630542975c146100ac5780631b11d0ff146100d7578063507611cb14610114578063715018a61461013d5780637535d24614610154576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100c161027b565b6040516100ce91906109f1565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190610aef565b61029f565b60405161010b9190610ba4565b60405180910390f35b34801561012057600080fd5b5061013b60048036038101906101369190610beb565b61042d565b005b34801561014957600080fd5b50610152610505565b005b34801561016057600080fd5b50610169610519565b6040516101769190610c87565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a19190610ca2565b61053d565b005b3480156101b457600080fd5b506101bd610646565b6040516101ca9190610cde565b60405180910390f35b3480156101df57600080fd5b506101e861066f565b005b3480156101f657600080fd5b506101ff6106fd565b60405161020c9190610d08565b60405180910390f35b34801561022157600080fd5b5061023c60048036038101906102379190610ca2565b610721565b005b34801561024a57600080fd5b5061026560048036038101906102609190610ca2565b6107a5565b6040516102729190610d08565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008085858101906102b49190610d61565b9250925092508973ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610335929190610db4565b6020604051808303816000875af1158015610354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103789190610df2565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662a718a9848c858d866040518663ffffffff1660e01b81526004016103d9959493929190610e1f565b600060405180830381600087803b1580156103f357600080fd5b505af1158015610407573d6000803e3d6000fd5b505050506000888a6104199190610ea1565b905060019450505050509695505050505050565b600030905060008690506000869050600086868660405160200161045393929190610ef7565b604051602081830303815290604052905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342b0b77c86868686866040518663ffffffff1660e01b81526004016104c7959493929190610fe4565b600060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b5050505050505050505050505050565b61050d610828565b61051760006108a6565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b610545610828565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105a09190610cde565b602060405180830381865afa1580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e19190611053565b6040518363ffffffff1660e01b81526004016105fe929190610db4565b6020604051808303816000875af115801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190610df2565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610677610828565b6000610681610646565b905060008173ffffffffffffffffffffffffffffffffffffffff16476040516106a9906110b1565b60006040518083038185875af1925050503d80600081146106e6576040519150601f19603f3d011682016040523d82523d6000602084013e6106eb565b606091505b50509050806106f957600080fd5b5050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b610729610828565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079090611149565b60405180910390fd5b6107a2816108a6565b50565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107e09190610cde565b602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108219190611053565b9050919050565b61083061096a565b73ffffffffffffffffffffffffffffffffffffffff1661084e610646565b73ffffffffffffffffffffffffffffffffffffffff16146108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b906111b5565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109b76109b26109ad84610972565b610992565b610972565b9050919050565b60006109c98261099c565b9050919050565b60006109db826109be565b9050919050565b6109eb816109d0565b82525050565b6000602082019050610a0660008301846109e2565b92915050565b600080fd5b600080fd5b6000610a2182610972565b9050919050565b610a3181610a16565b8114610a3c57600080fd5b50565b600081359050610a4e81610a28565b92915050565b6000819050919050565b610a6781610a54565b8114610a7257600080fd5b50565b600081359050610a8481610a5e565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610aaf57610aae610a8a565b5b8235905067ffffffffffffffff811115610acc57610acb610a8f565b5b602083019150836001820283011115610ae857610ae7610a94565b5b9250929050565b60008060008060008060a08789031215610b0c57610b0b610a0c565b5b6000610b1a89828a01610a3f565b9650506020610b2b89828a01610a75565b9550506040610b3c89828a01610a75565b9450506060610b4d89828a01610a3f565b935050608087013567ffffffffffffffff811115610b6e57610b6d610a11565b5b610b7a89828a01610a99565b92509250509295509295509295565b60008115159050919050565b610b9e81610b89565b82525050565b6000602082019050610bb96000830184610b95565b92915050565b610bc881610b89565b8114610bd357600080fd5b50565b600081359050610be581610bbf565b92915050565b600080600080600060a08688031215610c0757610c06610a0c565b5b6000610c1588828901610a3f565b9550506020610c2688828901610a75565b9450506040610c3788828901610a3f565b9350506060610c4888828901610a3f565b9250506080610c5988828901610bd6565b9150509295509295909350565b6000610c71826109be565b9050919050565b610c8181610c66565b82525050565b6000602082019050610c9c6000830184610c78565b92915050565b600060208284031215610cb857610cb7610a0c565b5b6000610cc684828501610a3f565b91505092915050565b610cd881610a16565b82525050565b6000602082019050610cf36000830184610ccf565b92915050565b610d0281610a54565b82525050565b6000602082019050610d1d6000830184610cf9565b92915050565b6000610d2e82610972565b9050919050565b610d3e81610d23565b8114610d4957600080fd5b50565b600081359050610d5b81610d35565b92915050565b600080600060608486031215610d7a57610d79610a0c565b5b6000610d8886828701610d4c565b9350506020610d9986828701610d4c565b9250506040610daa86828701610bd6565b9150509250925092565b6000604082019050610dc96000830185610ccf565b610dd66020830184610cf9565b9392505050565b600081519050610dec81610bbf565b92915050565b600060208284031215610e0857610e07610a0c565b5b6000610e1684828501610ddd565b91505092915050565b600060a082019050610e346000830188610ccf565b610e416020830187610ccf565b610e4e6040830186610ccf565b610e5b6060830185610cf9565b610e686080830184610b95565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eac82610a54565b9150610eb783610a54565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eec57610eeb610e72565b5b828201905092915050565b6000606082019050610f0c6000830186610ccf565b610f196020830185610ccf565b610f266040830184610b95565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f68578082015181840152602081019050610f4d565b83811115610f77576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f9982610f2e565b610fa38185610f39565b9350610fb3818560208601610f4a565b610fbc81610f7d565b840191505092915050565b600061ffff82169050919050565b610fde81610fc7565b82525050565b600060a082019050610ff96000830188610ccf565b6110066020830187610ccf565b6110136040830186610cf9565b81810360608301526110258185610f8e565b90506110346080830184610fd5565b9695505050505050565b60008151905061104d81610a5e565b92915050565b60006020828403121561106957611068610a0c565b5b60006110778482850161103e565b91505092915050565b600081905092915050565b50565b600061109b600083611080565b91506110a68261108b565b600082019050919050565b60006110bc8261108e565b9150819050919050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111336026836110c6565b915061113e826110d7565b604082019050919050565b6000602082019050818103600083015261116281611126565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061119f6020836110c6565b91506111aa82611169565b602082019050919050565b600060208201905081810360008301526111ce81611192565b905091905056fea26469706673582212204e919fb9c9a01a5b628fe8c83807af1dcb5c1032c11ee2a660ee000174e70fa964736f6c634300080a0033";

type LiquidatooorV3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidatooorV3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidatooorV3__factory extends ContractFactory {
  constructor(...args: LiquidatooorV3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _addressesProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LiquidatooorV3> {
    return super.deploy(
      _addressesProvider,
      overrides || {}
    ) as Promise<LiquidatooorV3>;
  }
  override getDeployTransaction(
    _addressesProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_addressesProvider, overrides || {});
  }
  override attach(address: string): LiquidatooorV3 {
    return super.attach(address) as LiquidatooorV3;
  }
  override connect(signer: Signer): LiquidatooorV3__factory {
    return super.connect(signer) as LiquidatooorV3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidatooorV3Interface {
    return new utils.Interface(_abi) as LiquidatooorV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidatooorV3 {
    return new Contract(address, _abi, signerOrProvider) as LiquidatooorV3;
  }
}
